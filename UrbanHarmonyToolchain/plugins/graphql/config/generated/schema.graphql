type Competitions {
  _id: ID!
  createdAt: String!
  updatedAt: String!
  Title: String!
  Description: String
  Rules: String
  Judges: String
  awards: String
  deadline: String!
  photo: UploadFile
  extraInfo: UploadFile
  contestants(sort: String, limit: Int, start: Int, where: JSON): [Contestant]
}

type Conditionsandlaws {
  _id: ID!
  createdAt: String!
  updatedAt: String!
  Title: String!
  Descrption: String
  pdf: UploadFile
  type: ENUM_CONDITIONSANDLAWS_TYPE!
}

type Conferences {
  _id: ID!
  createdAt: String!
  updatedAt: String!
  title: String
  date: String
  type: ENUM_CONFERENCES_TYPE!
  details: String
  link: String
  photos(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  pdfs(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

type Consultingoffice {
  _id: ID!
  createdAt: String!
  updatedAt: String!
  officeName: String
  owner: String
  speciality: String
  address: String
  postalCode: String
  phoneNumbers: String
  Fax: String
  email: String
  specialities: String
}

type Contestant {
  _id: ID!
  createdAt: String!
  updatedAt: String!
  name: String!
  age: Int
  email: String!
  phone: String
  personalPhoto: UploadFile
  img1: String
  img2: String
  img3: String
  status: ENUM_CONTESTANT_STATUS
  competitions: Competitions
  address: String
}

enum ENUM_CONDITIONSANDLAWS_TYPE {
  Laws
  Borders
  Guidelines
}

enum ENUM_CONFERENCES_TYPE {
  Seminar
  Internal
  Conference
}

enum ENUM_CONTESTANT_STATUS {
  applied
  accepted
  winner
  first
  second
  third
}

enum ENUM_INTERNALNEWS_TYPE {
  Social
  Paper
  Electronic
}

enum ENUM_LIBRARY_BOOKCATEGORY {
  history
  engineering
  literature
  sociology
}

enum ENUM_PETITION_STATUS {
  na
  accepted
  rejected
}

enum ENUM_PROJECTS_STATUS {
  working
  planned
  done
}

enum ENUM_SURVEYLIST_STATUS {
  exists
  No
}

type Governorate {
  _id: ID!
  createdAt: String!
  updatedAt: String!
  governateName: String!
  regions(sort: String, limit: Int, start: Int, where: JSON): [Regions]
}

type Incident {
  _id: ID!
  createdAt: String!
  updatedAt: String!
  subject: String
  address: String
  description: String
  Date: String
  Photographer: String
  image: UploadFile
}

type Internalnews {
  _id: ID!
  createdAt: String!
  updatedAt: String!
  ArticleName: String
  Type: ENUM_INTERNALNEWS_TYPE!
  datePublished: String
  new_paragraph1: String
  new_image1: UploadFile
  new_paragraph2: String
  new_image2: UploadFile
  new_paragraph3: String
  new_image3: UploadFile
  new_paragraph4: String
  new_image4: UploadFile
  new_paragraph5: String
  new_image5: UploadFile
}

type Journal {
  _id: ID!
  createdAt: String!
  updatedAt: String!
  AuthorName: String
  ArticleName: String
  DatePublished: String
  Description: String
  ImgURL: UploadFile
  URL: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Library {
  _id: ID!
  createdAt: String!
  updatedAt: String!
  author: String
  printingNo: String
  classNo: String
  numberOfCopies: String
  publisher: String
  yearOfPublish: String
  location: String
  ISBN: String
  bookcategory: ENUM_LIBRARY_BOOKCATEGORY
  title: String!
  image: UploadFile
  seriesName: String
  abstract: String
}

union Morph = Competitions | Conditionsandlaws | Conferences | Consultingoffice | Contestant | Governorate | Incident | Internalnews | Journal | Library | Petition | Projects | Regions | Spotlight | Studies | Surveylist | Videos | UploadFile | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser

type Petition {
  _id: ID!
  createdAt: String!
  updatedAt: String!
  commiteeDate: String
  status: ENUM_PETITION_STATUS
  surveylist: Surveylist
  genID: String
  owner: String!
  ownerType: String
  committeDesicion: String
  recommendation: String
  buildingPhoto: UploadFile
}

type Projects {
  _id: ID!
  createdAt: String!
  updatedAt: String!
  Place: String
  Event: String
  Details: String
  Status: ENUM_PROJECTS_STATUS!
  Title: String
  imgBefore: UploadFile
  imgAfter: UploadFile
  imgBefore2: UploadFile
  imgAfter2: UploadFile
}

type Query {
  competition(id: ID!): Competitions
  competitions(sort: String, limit: Int, start: Int, where: JSON): [Competitions]
  conditionsandlaw(id: ID!): Conditionsandlaws
  conditionsandlaws(sort: String, limit: Int, start: Int, where: JSON): [Conditionsandlaws]
  conference(id: ID!): Conferences
  conferences(sort: String, limit: Int, start: Int, where: JSON): [Conferences]
  consultingoffice(id: ID!): Consultingoffice
  consultingoffices(sort: String, limit: Int, start: Int, where: JSON): [Consultingoffice]
  contestant(id: ID!): Contestant
  contestants(sort: String, limit: Int, start: Int, where: JSON): [Contestant]
  governorate(id: ID!): Governorate
  governorates(sort: String, limit: Int, start: Int, where: JSON): [Governorate]
  incident(id: ID!): Incident
  incidents(sort: String, limit: Int, start: Int, where: JSON): [Incident]
  internalnew(id: ID!): Internalnews
  internalnews(sort: String, limit: Int, start: Int, where: JSON): [Internalnews]
  journal(id: ID!): Journal
  journals(sort: String, limit: Int, start: Int, where: JSON): [Journal]
  library(id: ID!): Library
  libraries(sort: String, limit: Int, start: Int, where: JSON): [Library]
  petition(id: ID!): Petition
  petitions(sort: String, limit: Int, start: Int, where: JSON): [Petition]
  project(id: ID!): Projects
  projects(sort: String, limit: Int, start: Int, where: JSON): [Projects]
  region(id: ID!): Regions
  regions(sort: String, limit: Int, start: Int, where: JSON): [Regions]
  spotlight(id: ID!): Spotlight
  spotlights(sort: String, limit: Int, start: Int, where: JSON): [Spotlight]
  study(id: ID!): Studies
  studies(sort: String, limit: Int, start: Int, where: JSON): [Studies]
  surveylist(id: ID!): Surveylist
  surveylists(sort: String, limit: Int, start: Int, where: JSON): [Surveylist]
  video(id: ID!): Videos
  videos(sort: String, limit: Int, start: Int, where: JSON): [Videos]
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type Regions {
  _id: ID!
  createdAt: String!
  updatedAt: String!
  regionName: String
  governorate: Governorate
}

type Spotlight {
  _id: ID!
  createdAt: String!
  updatedAt: String!
  url: String!
}

"""Support for adding studies."""
type Studies {
  _id: ID!
  createdAt: String!
  updatedAt: String!
  researchName: String!
  researcher: String!
  publicationDate: String
  publishingHouse: String
  brief: String
  research: UploadFile
}

type Surveylist {
  _id: ID!
  createdAt: String!
  updatedAt: String!
  genID: String
  registrationNumber: Int
  buildingType: String
  buildingName: String
  buildingValue: String
  status: ENUM_SURVEYLIST_STATUS
  address: String
  governorate: String
  mainArea: String
  subArea: String
  buildingNumber: Int
  currentOwner: String
  mainOwner: String
  petition(sort: String, limit: Int, start: Int, where: JSON): [Petition]
}

type UploadFile {
  _id: ID!
  createdAt: String!
  updatedAt: String!
  name: String!
  hash: String!
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UsersPermissionsPermission {
  _id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String!
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  _id: ID!
  name: String!
  description: String
  type: String
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
}

type UsersPermissionsUser {
  _id: ID!
  username: String!
  email: String!
  provider: String
  role: UsersPermissionsRole
}

type Videos {
  _id: ID!
  createdAt: String!
  updatedAt: String!
  ProgramName: String
  URL: String
  Channel: String
  Date: String
  GuestNames: String
  Description: String
  MoreDetails: String
}
